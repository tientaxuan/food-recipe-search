{"version":3,"sources":["Ingredients.js","Recipe.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Ingreidents","ingredients","map","ingredient","id","Recipe","label","calories","image","ingredientLines","isErrorSearch","className","Math","ceil","Ingredients","src","alt","Alert","error","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","setError","API","a","fetch","res","json","data","console","log","hits","useEffect","request","type","value","onChange","e","target","onClick","preventDefault","recipe","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPASeA,EAPK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAClB,6BACGA,EAAYC,KAAI,SAACC,EAAYC,GAAb,OACf,6BAAcD,GAALC,SCYAC,EAfA,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,gBACxC,OAD6E,EAApBC,cAC/B,KAExB,sBAAKC,UAAU,SAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,6CAA2C,GAA3BM,KAAKC,KAAKN,EAAW,IAArC,SACA,gCACE,6CACA,cAACO,EAAD,CAAab,YAAaQ,OAE5B,qBAAKM,IAAKP,EAAOQ,IAAI,SCLZC,EALD,SAAC,GACb,OAD2B,EAAZC,MACG,gDACX,MCCM,SAASC,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA0BN,oBAAS,GAAnC,mBAAOF,EAAP,KAAcS,EAAd,KAGMC,EAAG,0CAAsCH,EAAtC,mBAFM,WAEN,oBADO,oCANY,4CAkB5B,8BAAAI,EAAA,sEAEIF,GAAS,GAFb,SAGsBG,MAAMF,GAH5B,cAGUG,EAHV,gBAIuBA,EAAIC,OAJ3B,OAIUC,EAJV,OAKIC,QAAQC,IAAIF,GACZX,EAAWW,EAAKG,MANpB,kDAQIT,GAAS,GARb,2DAlB4B,sBA6B5B,OAdAU,qBAAU,YAfkB,mCAgB1BC,KACC,CAACb,IAaF,sBAAKd,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAhB,UACE,uBACEA,UAAU,aACV4B,KAAK,OACLC,MAAOjB,EACPkB,SA5Ba,SAACC,GACpBlB,EAAUkB,EAAEC,OAAOH,UA6Bf,wBAAQ7B,UAAU,gBAAgB4B,KAAK,SAASK,QA3BlC,SAACF,GACnBA,EAAEG,iBACFnB,EAASH,IAyBL,uBAIF,qBAAKZ,UAAU,UAAf,SACGU,EAAQnB,KAAI,SAAC4C,EAAQ1C,GAAT,OACX,cAAC,EAAD,aAAiBM,cAAeQ,GAAW4B,EAAOA,QAArC1C,QAGjB,cAAC,EAAD,CAAO2C,MAAO7B,OCpDpB,IAYe8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c408a24d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Ingreidents = ({ ingredients }) => (\r\n  <ul>\r\n    {ingredients.map((ingredient, id) => (\r\n      <li key={id}>{ingredient}</li>\r\n    ))}\r\n  </ul>\r\n);\r\nexport default Ingreidents;\r\n","import React from 'react';\r\nimport Ingredients from './Ingredients';\r\nconst Recipe = ({ label, calories, image, ingredientLines, isErrorSearch }) => {\r\n  if (isErrorSearch) return null;\r\n  return (\r\n    <div className='Recipe'>\r\n      <h2 className='recipe-title'>{label}</h2>\r\n      <h4>Calories : {Math.ceil(calories / 10) * 10}cal</h4>\r\n      <div>\r\n        <h3>Ingredients</h3>\r\n        <Ingredients ingredients={ingredientLines} />\r\n      </div>\r\n      <img src={image} alt='' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from 'react';\r\n\r\nconst Alert = ({ error }) => {\r\n  if (error) return <h2>OOP NOT FOUND!</h2>;\r\n  return null;\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\nimport Alert from './Alert';\n\nexport default function App() {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n  const [error, setError] = useState(false);\n  const APP_ID = 'af9a1891';\n  const APP_KEY = '4e6c27a9deb23fa8d7dfa1483f41096f';\n  const API = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n  const handleClick = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n  useEffect(() => {\n    request();\n  }, [query]);\n  async function request() {\n    try {\n      setError(false);\n      const res = await fetch(API);\n      const data = await res.json();\n      console.log(data);\n      setRecipes(data.hits);\n    } catch (e) {\n      setError(true);\n    }\n  }\n  return (\n    <div className='App'>\n      <form className='search-form'>\n        <input\n          className='search-bar'\n          type='text'\n          value={search}\n          onChange={handleSearch}\n        />\n        <button className='search-button' type='submit' onClick={handleClick}>\n          Search\n        </button>\n      </form>\n      <div className='recipes'>\n        {recipes.map((recipe, id) => (\n          <Recipe key={id} isErrorSearch={error} {...recipe.recipe} />\n        ))}\n      </div>\n      <Alert alert={error} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}